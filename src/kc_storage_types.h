/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef kc_storage_TYPES_H
#define kc_storage_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace KC_Storage {

struct putOption {
  enum type {
    add = 0,
    update = 1,
    overide = 2
  };
};

extern const std::map<int, const char*> _putOption_VALUES_TO_NAMES;

typedef struct _Z_data__isset {
  _Z_data__isset() : errorCode(false), data(false) {}
  bool errorCode;
  bool data;
} _Z_data__isset;

class Z_data {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Z_data() : errorCode(0), data() {
  }

  virtual ~Z_data() throw() {}

  int32_t errorCode;
  std::string data;

  _Z_data__isset __isset;

  void __set_errorCode(const int32_t val) {
    errorCode = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  bool operator == (const Z_data & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Z_data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Z_data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Z_data &a, Z_data &b);

typedef struct _Z_total__isset {
  _Z_total__isset() : errorCode(false), total(false) {}
  bool errorCode;
  bool total;
} _Z_total__isset;

class Z_total {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  Z_total() : errorCode(0), total(0) {
  }

  virtual ~Z_total() throw() {}

  int32_t errorCode;
  int64_t total;

  _Z_total__isset __isset;

  void __set_errorCode(const int32_t val) {
    errorCode = val;
  }

  void __set_total(const int64_t val) {
    total = val;
  }

  bool operator == (const Z_total & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(total == rhs.total))
      return false;
    return true;
  }
  bool operator != (const Z_total &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Z_total & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Z_total &a, Z_total &b);

typedef struct _Z_status__isset {
  _Z_status__isset() : errorCode(false), status(false) {}
  bool errorCode;
  bool status;
} _Z_status__isset;

class Z_status {
 public:

  static const char* ascii_fingerprint; // = "4DC0C1A1F380340B40244ADC7FB0BA60";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0xC0,0xC1,0xA1,0xF3,0x80,0x34,0x0B,0x40,0x24,0x4A,0xDC,0x7F,0xB0,0xBA,0x60};

  Z_status() : errorCode(0), status(0) {
  }

  virtual ~Z_status() throw() {}

  int32_t errorCode;
  bool status;

  _Z_status__isset __isset;

  void __set_errorCode(const int32_t val) {
    errorCode = val;
  }

  void __set_status(const bool val) {
    status = val;
  }

  bool operator == (const Z_status & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const Z_status &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Z_status & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Z_status &a, Z_status &b);

} // namespace

#endif
